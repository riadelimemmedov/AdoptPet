openapi: 3.0.3
info:
  title: Django DRF Ecommerce
  version: 1.0.0
  description: This project purpose creating ecommerce api for business company
paths:
  /api/auth/login/:
    post:
      operationId: api_auth_login_create
      description: |-
        Check the credentials and return the REST Token
        if the credentials are valid and authenticated.
        Calls Django Auth login method to register User ID
        in Django session framework

        Accept the following POST parameters: username, password
        Return the REST Framework Token Object's key.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Login'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Login'
        required: true
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
          description: ''
  /api/auth/logout/:
    post:
      operationId: api_auth_logout_create
      description: |-
        Calls Django logout method and delete the Token object
        assigned to the current User object.

        Accepts/Returns nothing.
      tags:
      - api
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /api/auth/register/:
    post:
      operationId: api_auth_register_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Register'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Register'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Register'
        required: true
      security:
      - tokenAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
          description: ''
  /api/auth/user/:
    get:
      operationId: api_auth_user_retrieve
      description: |-
        Reads and updates UserModel fields
        Accepts GET, PUT, PATCH methods.

        Default accepted fields: username, first_name, last_name
        Default display fields: pk, username, email, first_name, last_name
        Read-only fields: pk, email

        Returns UserModel fields.
      tags:
      - api
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
          description: ''
    put:
      operationId: api_auth_user_update
      description: |-
        Reads and updates UserModel fields
        Accepts GET, PUT, PATCH methods.

        Default accepted fields: username, first_name, last_name
        Default display fields: pk, username, email, first_name, last_name
        Read-only fields: pk, email

        Returns UserModel fields.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDetails'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserDetails'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserDetails'
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
          description: ''
    patch:
      operationId: api_auth_user_partial_update
      description: |-
        Reads and updates UserModel fields
        Accepts GET, PUT, PATCH methods.

        Default accepted fields: username, first_name, last_name
        Default display fields: pk, username, email, first_name, last_name
        Read-only fields: pk, email

        Returns UserModel fields.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserDetails'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserDetails'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserDetails'
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
          description: ''
  /orders/create-checkout-session/:
    post:
      operationId: orders_create_checkout_session_create
      description: Order
      tags:
      - orders
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /pets/:
    get:
      operationId: pets_retrieve
      description: |-
        Retrieve a list of all pets.

        Parameters:
            request (HttpRequest): The HTTP request object.

        Returns:
            Response: A response object containing the serialized data of all pets and the HTTP status code.
      tags:
      - pets
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
          description: ''
    post:
      operationId: pets_create
      description: |-
        Create a new pet.

        Parameters:
            request (HttpRequest): The HTTP request object.
            format (str): The format of the request data (optional).

        Returns:
            Response: A response object containing the serialized data of the created pet and the HTTP status code.
      tags:
      - pets
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Pet'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Pet'
        required: true
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
          description: ''
    delete:
      operationId: pets_destroy
      description: |-
        Delete all pets.

        Parameters:
            request (HttpRequest): The HTTP request object.

        Returns:
            Response: A response object with no content and the HTTP status code indicating success.
      tags:
      - pets
      security:
      - tokenAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /pets/{slug}/:
    get:
      operationId: pets_retrieve_2
      description: |-
        Retrieve details of a specific pet.

        Parameters:
            request (HttpRequest): The HTTP request object.
            slug (str): The slug of the pet.

        Returns:
            Response: A response object containing the serialized data of the pet if found, or an HTTP status code indicating not found.
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        required: true
      tags:
      - pets
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
          description: ''
    put:
      operationId: pets_update
      description: |-
        Update the details of a specific pet.

        Parameters:
            request (HttpRequest): The HTTP request object.
            slug (str): The slug of the pet.

        Returns:
            Response: A response object containing the serialized data of the updated pet if successful, or an HTTP status code indicating an error.
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        required: true
      tags:
      - pets
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Pet'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Pet'
        required: true
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
          description: ''
    delete:
      operationId: pets_destroy_2
      description: |-
        Delete a specific pet.

        Parameters:
            request (HttpRequest): The HTTP request object.
            slug (str): The slug of the pet.

        Returns:
            Response: A response object with no content and the HTTP status code indicating success or not found.
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        required: true
      tags:
      - pets
      security:
      - tokenAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /transactions/:
    get:
      operationId: transactions_retrieve
      tags:
      - transactions
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
          description: ''
    post:
      operationId: transactions_create
      tags:
      - transactions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transaction'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Transaction'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Transaction'
        required: true
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
          description: ''
  /upload/image/:
    post:
      operationId: upload_image_create
      tags:
      - upload
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Upload'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Upload'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Upload'
        required: true
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Upload'
          description: ''
components:
  schemas:
    GenderEnum:
      enum:
      - MALE
      - FEMALE
      - 'Neutered '
      - Spayed
      - Other
      type: string
      description: "* `MALE` - male\n* `FEMALE` - female\n* `Neutered ` - neutered\
        \ \n* `Spayed` - spayed\n* `Other` - other"
    Login:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
      required:
      - password
    PatchedUserDetails:
      type: object
      description: User model w/o password
      properties:
        pk:
          type: integer
          readOnly: true
          title: ID
        email:
          type: string
          format: email
          readOnly: true
          title: Email address
    PaymentOptionsEnum:
      enum:
      - STRIPE
      - ETHEREUM
      type: string
      description: |-
        * `STRIPE` - stripe
        * `ETHEREUM` - ethereum
    Pet:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 50
        age:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
          format: int64
        breed:
          type: string
          maxLength: 50
        slug:
          type: string
          readOnly: true
          pattern: ^[-a-zA-Z0-9_]+$
        color:
          type: string
          pattern: ^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$
          maxLength: 25
        weight:
          type: number
          format: double
        gender:
          $ref: '#/components/schemas/GenderEnum'
        pet_photo_url:
          type: string
          format: uri
          title: Pet photo
          pattern: (?:png|jpg|jpeg)$
        pet_photo_link:
          type: string
          format: uri
          maxLength: 200
        location:
          type: string
          maxLength: 50
        city:
          type: string
          maxLength: 50
        status:
          type: boolean
        vaccinated:
          type: boolean
        price_currency:
          type: string
          readOnly: true
          nullable: true
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,12}(?:\.\d{0,2})?$
          nullable: true
        description:
          type: string
          maxLength: 150
      required:
      - age
      - breed
      - city
      - description
      - id
      - location
      - name
      - price_currency
      - slug
      - weight
    Register:
      type: object
      properties:
        username:
          type: string
          maxLength: 100
          minLength: 1
        email:
          type: string
          format: email
        password1:
          type: string
          writeOnly: true
        password2:
          type: string
          writeOnly: true
      required:
      - password1
      - password2
      - username
    RestAuthDetail:
      type: object
      properties:
        detail:
          type: string
          readOnly: true
      required:
      - detail
    Token:
      type: object
      description: Serializer for Token model.
      properties:
        key:
          type: string
          maxLength: 40
      required:
      - key
    Transaction:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        from_user:
          type: string
        confirmations:
          type: string
        created:
          type: string
          format: date-time
          readOnly: true
        modified:
          type: string
          format: date-time
          readOnly: true
        value:
          type: string
          maxLength: 100
        adopted_pet_slug:
          type: string
          title: Adopted slug
          maxLength: 100
        payment_options:
          $ref: '#/components/schemas/PaymentOptionsEnum'
        session_id:
          type: string
          nullable: true
          title: Session
          maxLength: 100
      required:
      - adopted_pet_slug
      - confirmations
      - created
      - from_user
      - id
      - modified
      - payment_options
      - value
    Upload:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        upload_at:
          type: string
          format: date-time
          readOnly: true
        file:
          type: string
          format: uri
      required:
      - file
      - id
      - upload_at
    UserDetails:
      type: object
      description: User model w/o password
      properties:
        pk:
          type: integer
          readOnly: true
          title: ID
        email:
          type: string
          format: email
          readOnly: true
          title: Email address
      required:
      - email
      - pk
  securitySchemes:
    tokenAuth:
      type: apiKey
      in: header
      name: Authorization
      description: Token-based authentication with required prefix "Token"
