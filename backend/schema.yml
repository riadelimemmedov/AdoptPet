openapi: 3.0.3
info:
  title: Django DRF Ecommerce
  version: 1.0.0
  description: This project purpose creating ecommerce api for business company
paths:
  /orders/create-checkout-session:
    post:
      operationId: orders_create_checkout_session_create
      description: Order
      tags:
      - orders
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /pets/:
    get:
      operationId: pets_retrieve
      description: |-
        Retrieve a list of all pets.

        Parameters:
            request (HttpRequest): The HTTP request object.

        Returns:
            Response: A response object containing the serialized data of all pets and the HTTP status code.
      tags:
      - pets
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
          description: ''
    post:
      operationId: pets_create
      description: |-
        Create a new pet.

        Parameters:
            request (HttpRequest): The HTTP request object.
            format (str): The format of the request data (optional).

        Returns:
            Response: A response object containing the serialized data of the created pet and the HTTP status code.
      tags:
      - pets
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Pet'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Pet'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
          description: ''
    delete:
      operationId: pets_destroy
      description: |-
        Delete all pets.

        Parameters:
            request (HttpRequest): The HTTP request object.

        Returns:
            Response: A response object with no content and the HTTP status code indicating success.
      tags:
      - pets
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /pets/{slug}/:
    get:
      operationId: pets_retrieve_2
      description: |-
        Retrieve details of a specific pet.

        Parameters:
            request (HttpRequest): The HTTP request object.
            slug (str): The slug of the pet.

        Returns:
            Response: A response object containing the serialized data of the pet if found, or an HTTP status code indicating not found.
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        required: true
      tags:
      - pets
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
          description: ''
    put:
      operationId: pets_update
      description: |-
        Update the details of a specific pet.

        Parameters:
            request (HttpRequest): The HTTP request object.
            slug (str): The slug of the pet.

        Returns:
            Response: A response object containing the serialized data of the updated pet if successful, or an HTTP status code indicating an error.
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        required: true
      tags:
      - pets
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Pet'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Pet'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
          description: ''
    delete:
      operationId: pets_destroy_2
      description: |-
        Delete a specific pet.

        Parameters:
            request (HttpRequest): The HTTP request object.
            slug (str): The slug of the pet.

        Returns:
            Response: A response object with no content and the HTTP status code indicating success or not found.
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        required: true
      tags:
      - pets
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /transactions/create-checkout-session:
    post:
      operationId: transactions_create_checkout_session_create
      description: Order
      tags:
      - transactions
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /upload/image/:
    post:
      operationId: upload_image_create
      tags:
      - upload
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Upload'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Upload'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Upload'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Upload'
          description: ''
components:
  schemas:
    GenderEnum:
      enum:
      - MALE
      - FEMALE
      - 'Neutered '
      - Spayed
      - Other
      type: string
      description: "* `MALE` - male\n* `FEMALE` - female\n* `Neutered ` - neutered\
        \ \n* `Spayed` - spayed\n* `Other` - other"
    Pet:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 50
        age:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
          format: int64
        breed:
          type: string
          maxLength: 50
        slug:
          type: string
          readOnly: true
          pattern: ^[-a-zA-Z0-9_]+$
        color:
          type: string
          pattern: ^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$
          maxLength: 25
        weight:
          type: number
          format: double
        gender:
          $ref: '#/components/schemas/GenderEnum'
        pet_photo_url:
          type: string
          format: uri
          title: Pet photo
          pattern: (?:png|jpg|jpeg)$
        pet_photo_link:
          type: string
          format: uri
          maxLength: 200
        location:
          type: string
          maxLength: 50
        city:
          type: string
          maxLength: 50
        status:
          type: boolean
        vaccinated:
          type: boolean
        price_currency:
          type: string
          readOnly: true
          nullable: true
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,12}(?:\.\d{0,2})?$
          nullable: true
        description:
          type: string
          maxLength: 150
      required:
      - age
      - breed
      - city
      - description
      - id
      - location
      - name
      - price_currency
      - slug
      - weight
    Upload:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        upload_at:
          type: string
          format: date-time
          readOnly: true
        file:
          type: string
          format: uri
      required:
      - file
      - id
      - upload_at
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
